You’re right to be frustrated—what you’re seeing is 100% explainable and fixable:
The Insurance (USD) card on the Executive dashboard isn’t passing the current time range to the Insurance page → it always opens on “Current Month”.
The Insurance Providers page doesn’t respect URL params or group yearly data by month like Patient Volume.
Below are copy-paste patches that fix both problems without touching the backend or breaking the live site.
1) Pass the time range when you click the Insurance card
File: client/src/components/dashboard/executive-style-kpis.tsx
Add the props your dashboard already knows (time range, year, month) and include them in the Link:
import { Link } from "wouter";

// add these to the component props
type ExecutiveStyleKPIsProps = {
  data: any;
  timeRange: 'current-month' | 'last-month' | 'last-3-months' | 'year' | 'custom';
  selectedYear: number;
  selectedMonth?: number;
};

export default function ExecutiveStyleKPIs({
  data,
  timeRange,
  selectedYear,
  selectedMonth,
}: ExecutiveStyleKPIsProps) {
  // ...existing KPI calculations...

  const qs = new URLSearchParams();
  qs.set('range', timeRange);
  qs.set('year', String(selectedYear));
  if (timeRange === 'current-month') {
    qs.set('month', String(selectedMonth ?? (new Date().getMonth() + 1)));
  }

  return (
    <>
      {/* …other KPI cards… */}

      {/* Insurance Revenue → preserve time filter */}
      <Link href={`/insurance-providers?${qs.toString()}`}>
        <Card className="border-0 shadow-md bg-white hover:shadow-lg transition-shadow cursor-pointer">
          <CardContent className="p-3">
            {/* …existing contents… */}
          </CardContent>
        </Card>
      </Link>
    </>
  );
}
Make sure the parent page that renders ExecutiveStyleKPIs passes timeRange, selectedYear, and selectedMonth (that page already has those when you switch between “Current Month/This Year”, so it’s just adding props).
2) Have Insurance Providers read the URL params and keep the URL in sync
File: client/src/pages/insurance-providers.tsx
At the top of the file, wire up query params via wouter and set initial state from them. Also keep the URL updated when the user changes the filters:
import { useEffect, useMemo, useState } from "react";
import { Link, useLocation } from "wouter";
import { format } from "date-fns";
// …other imports…

type Range = 'current-month' | 'last-month' | 'last-3-months' | 'year' | 'custom';

export default function InsuranceProvidersPage() {
  const [location, navigate] = useLocation();

  // read query string from the current location
  const search = useMemo(() => {
    const q = location.split('?')[1] ?? '';
    return new URLSearchParams(q);
  }, [location]);

  const initialRange = (search.get('range') as Range) ?? 'current-month';
  const initialYear  = Number(search.get('year')) || new Date().getFullYear();
  const initialMonth = Number(search.get('month')) || (new Date().getMonth() + 1);

  const [timeRange, setTimeRange] = useState<Range>(initialRange);
  const [selectedYear, setSelectedYear] = useState<number>(initialYear);
  const [selectedMonth, setSelectedMonth] = useState<number>(initialMonth);

  // Keep the URL in sync when user changes filters (shareable/bookmarkable)
  useEffect(() => {
    const qs = new URLSearchParams();
    qs.set('range', timeRange);
    qs.set('year', String(selectedYear));
    if (timeRange === 'current-month') {
      qs.set('month', String(selectedMonth));
    }
    navigate(`/insurance-providers?${qs.toString()}`, { replace: true });
  }, [timeRange, selectedYear, selectedMonth, navigate]);

  // …existing data fetching logic that already uses timeRange/selectedYear/selectedMonth…
If your data query doesn’t yet take timeRange/selectedYear/selectedMonth, pass those variables into your query key / fetcher so it refetches when they change.
3) When “This Year” is selected, group insurance by month (like Patient Volume)
Keep your existing annual totals, but render a simple month-by-month breakdown when timeRange === 'year'. This is client-side only and won’t break anything.
Add this (after you have the data from your query):
  const isYearView = timeRange === 'year';

  // Example: adapt to your actual data shape
  // Expecting data.records: Array<{ date: string | Date; providerName: string; amountUSD: number }>
  const monthly = useMemo(() => {
    if (!isYearView || !data?.records) return null;

    const buckets = Array.from({ length: 12 }, (_, i) => ({
      month: i + 1,
      label: format(new Date(selectedYear, i, 1), 'MMM'),
      totalUSD: 0,
      byProvider: {} as Record<string, number>,
    }));

    for (const r of data.records) {
      const when = new Date(r.date);
      if (when.getFullYear() !== selectedYear) continue;
      const mIdx = when.getMonth();
      buckets[mIdx].totalUSD += r.amountUSD;
      buckets[mIdx].byProvider[r.providerName] =
        (buckets[mIdx].byProvider[r.providerName] ?? 0) + r.amountUSD;
    }
    return buckets;
  }, [isYearView, data?.records, selectedYear]);
Then in your JSX, below your existing totals section:
  {isYearView && monthly && (
    <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 mt-6">
      {monthly.map((m) => (
        <Card key={m.month} className="border-0 shadow-sm">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">{m.label}</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="text-xl font-semibold">USD {m.totalUSD.toLocaleString()}</div>
            <div className="text-xs text-muted-foreground">By provider</div>
            <ul className="text-sm space-y-1">
              {Object.entries(m.byProvider).map(([name, val]) => (
                <li key={name} className="flex justify-between">
                  <span>{name}</span>
                  <span>USD {val.toLocaleString()}</span>
                </li>
              ))}
              {Object.keys(m.byProvider).length === 0 && (
                <li className="text-muted-foreground">No insurance in this month</li>
              )}
            </ul>
          </CardContent>
        </Card>
      ))}
    </div>
  )}
This mirrors the feel of Patient Volume: clear monthly buckets under “This Year”.